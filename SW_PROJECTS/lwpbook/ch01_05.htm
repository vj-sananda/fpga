<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>LWP in Action (Perl &amp; LWP)</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" >
<script type="text/javascript">var lwp_pageid="ch01_05"; var lwp_lastmod=
  'Time-stamp: "2007-11-12 19:38:26 AST"';  </script>
<link rel="stylesheet" type="text/css" href="lwpstyle.css" />
</head>
<body id='ch01_05' class='lwp lwp_ch01_05' lang='en-US' >
<noscript><p align=center>^ <a href="./index.html">Perl and LWP</a> ^</p></noscript>
<script type="text/javascript" src="./lwp_nav.js"></script>

<h2 class="sect1">1.5. LWP in Action</h2>

<p>Enough of why you should be careful
<a name="INDEX-41" class="ipoint"
></a>when you automate the Web.
Let's look at the types of things
you'll be learning in this book. <a href="ch02_01.htm">Chapter 2, "Web Basics"</a> introduces web automation and LWP, presenting
straightforward functions to let you fetch web pages. <a href="ch01_05.htm#perllwp-CHP-1-EX-1">Example 1-1</a> shows how to fetch the
O'Reilly home page and count the number of times
Perl is mentioned.
</p>

<a name="perllwp-CHP-1-EX-1"></a><div class="example">
<h4 class="objtitle">Example 1-1. Count "Perl" in the O'Reilly catalog </h4>
<pre class="code">#!/usr/bin/perl -w
use strict;
use LWP::Simple;
  
my $catalog = get("http://www.oreilly.com/catalog");
die "Couldn't get it?!" unless $catalog;
my $count = 0;
$count++ while $catalog =~ m{Perl}gi;
print "$count\n";</pre>
</div>

<p>The LWP::Simple module's <tt class="literal">get(&#160;)</tt>
function <a name="INDEX-42" class="ipoint"
></a><a name="INDEX-43" class="ipoint"
></a>returns the document at a given URL or
<tt class="literal">undef</tt> if an error occurred. A regular expression
match in a loop counts the number of occurrences.
</p>

<a name="perllwp-CHP-1-SECT-5.1"></a><div class="sect2">
<h3 class="sect2">1.5.1. The Object-Oriented Interface</h3>

<p><a href="ch03_01.htm">Chapter 3, "The LWP Class Model"</a> goes beyond LWP::Simple to
<a name="INDEX-44" class="ipoint"
></a><a name="INDEX-45" class="ipoint"
></a>show larger
LWP's powerful object-oriented interface. Most
useful of all the features it covers are how to set headers in
requests and check the headers of responses. <a href="ch01_05.htm#perllwp-CHP-1-EX-2">Example 1-2</a> prints the identifying string that every
server returns.
</p>

<a name="perllwp-CHP-1-EX-2"></a><div class="example">
<h4 class="objtitle">Example 1-2. Identify a server </h4>
<pre class="code">#!/usr/bin/perl -w
use strict;
use LWP;
  
my $browser = LWP::UserAgent-&gt;new( );
my $response = $browser-&gt;get("http://www.oreilly.com/");
print $response-&gt;header("Server"), "\n";</pre>
</div>

<p>The two variables, <tt class="literal">$browser</tt> and
<tt class="literal">$response</tt>, are references to objects.
LWP::UserAgent object <tt class="literal">$browser</tt> makes requests of a
server and creates HTTP::Response objects such as
<tt class="literal">$response</tt> to represent the
server's reply. In <a href="ch01_05.htm#perllwp-CHP-1-EX-2">Example 1-2</a>, we
call the <tt class="literal">header(&#160;)</tt> method on the response to check
one of the HTTP header values.
</p>

</div>
<a name="perllwp-CHP-1-SECT-5.2"></a><div class="sect2">
<h3 class="sect2">1.5.2. Forms</h3>

<p><a href="ch05_01.htm">Chapter 5, "Forms"</a> shows how to analyze and submit
<a name="INDEX-46" class="ipoint"
></a>forms with LWP,
including both GET and POST submissions. <a href="ch01_05.htm#perllwp-CHP-1-EX-3">Example 1-3</a>
makes queries of the California license plate database to see whether
a personalized plate is available.
</p>

<a name="perllwp-CHP-1-EX-3"></a><div class="example">
<h4 class="objtitle">Example 1-3. Query California license plate database </h4>
<pre class="code">#!/usr/bin/perl -w
# pl8.pl -  query California license plate database
 
use strict;
use LWP::UserAgent;
my $plate = $ARGV[0] || die "Plate to search for?\n";
$plate = uc $plate;
$plate =~ tr/O/0/;  # we use zero for letter-oh
die "$plate is invalid.\n"
 unless $plate =~ m/^[A-Z0-9]{2,7}$/
    and $plate !~ m/^\d+$/;  # no all-digit plates
 
my $browser = LWP::UserAgent-&gt;new;
my $response = $browser-&gt;post(
  'http://plates.ca.gov/search/search.php3',
  [
    'plate'  =&gt; $plate,
    'search' =&gt; 'Check Plate Availability'
  ],
);
die "Error: ", $response-&gt;status_line
 unless $response-&gt;is_success;
 
if($response-&gt;content =~ m/is unavailable/) {
  print "$plate is already taken.\n";
} elsif($response-&gt;content =~ m/and available/) {
  print "$plate is AVAILABLE!\n";
} else {
  print "$plate... Can't make sense of response?!\n";
}
exit;</pre>
</div>

<p>Here's how you might use it:</p>

<pre class="code">% pl8.pl knee
KNEE is already taken.
% pl8.pl ankle
ANKLE is AVAILABLE!</pre>

<p>We use the <tt class="literal">post(&#160;)</tt> method on an LWP::UserAgent
object to POST form parameters to a page.
</p>

</div>
<a name="perllwp-CHP-1-SECT-5.3"></a><div class="sect2">
<h3 class="sect2">1.5.3. Parsing HTML</h3>

<p>The regular expression
<a name="INDEX-47" class="ipoint"
></a><a name="INDEX-48" class="ipoint"
></a>techniques
in Examples <a href="ch01_05.htm#perllwp-CHP-1-EX-1">Example 1-1</a> and <a href="ch01_05.htm#perllwp-CHP-1-EX-3">Example 1-3</a> are discussed in detail in <a href="ch06_01.htm">Chapter 6, "Simple HTML Processing with Regular Expressions"</a>. <a href="ch07_01.htm">Chapter 7, "HTML Processing with Tokens"</a> shows a
different approach, where the HTML::TokeParser module turns a string
of HTML into a stream of chunks
("start-tag,"
"text,"
"close-tag," and so on). <a href="ch08_01.htm">Chapter 8, "Tokenizing Walkthrough"</a> is a detailed step-by-step walkthrough showing
how to solve a problem using HTML::TokeParser. <a href="ch01_05.htm#perllwp-CHP-1-EX-4">Example 1-4</a> uses HTML::TokeParser to extract the
<tt class="literal">src</tt> parts of all <tt class="literal">img</tt> tags in
the O'Reilly home page.
</p>

<a name="perllwp-CHP-1-EX-4"></a><div class="example">
<h4 class="objtitle">Example 1-4. Extract image locations </h4>
<pre class="code">#!/usr/bin/perl -w
  
use strict;
use LWP::Simple;
use HTML::TokeParser;
  
my $html   = get("http://www.oreilly.com/");
my $stream = HTML::TokeParser-&gt;new(\$html);
my %image  = ( );
  
while (my $token = $stream-&gt;get_token) {
    if ($token-&gt;[0] eq 'S' &amp;&amp; $token-&gt;[1] eq 'img') {
        # store src value in %image
        $image{ $token-&gt;[2]{'src'} }++;
    }
}
  
foreach my $pic (sort keys %image) {
    print "$pic\n";
}</pre>
</div>

<p>The <tt class="literal">get_token(&#160;)</tt> method on our HTML::TokeParser
object returns an array reference, representing a token. If the first
array element is S, it's a token representing the
start of a tag. The second array element is the type of tag, and the
third array element is a hash mapping attribute to value. The
<tt class="literal">%image</tt> hash holds the images we find.
</p>

<p><a href="ch09_01.htm">Chapter 9, "HTML Processing with Trees"</a> and <a href="ch10_01.htm">Chapter 10, "Modifying HTML with Trees"</a> show how to use tree data structures to
represent HTML. The HTML::TreeBuilder module constructs such trees
and provides operations for searching and manipulating them. <a href="ch01_05.htm#perllwp-CHP-1-EX-5">Example 1-5</a> extracts image locations using a tree.
</p>

<a name="perllwp-CHP-1-EX-5"></a><div class="example">
<h4 class="objtitle">Example 1-5. Extracting image locations with a tree </h4>
<pre class="code">#!/usr/bin/perl -w
  
use strict;
use LWP::Simple;
use HTML::TreeBuilder;
  
my $html = get("http://www.oreilly.com/");
my $root = HTML::TreeBuilder-&gt;new_from_content($html);
my %images;
foreach my $node ($root-&gt;find_by_tag_name('img')) {
    $images{ $node-&gt;attr('src') }++;
}
  
foreach my $pic (sort keys %images) {
    print "$pic\n";
}</pre>
</div>

<p>We create a new tree from the HTML in the O'Reilly
home page. The tree has methods to help us search, such as
<tt class="literal">find_by_tag_name(&#160;)</tt>, which returns a list of nodes
corresponding to those tags. We use that to find the img tags, then
use the <tt class="literal">attr(&#160;)</tt> method to get their
<tt class="literal">src</tt> attributes.
</p>

</div>
<a name="perllwp-CHP-1-SECT-5.4"></a><div class="sect2">
<h3 class="sect2">1.5.4. Authentication</h3>

<p><a href="ch11_01.htm">Chapter 11, "Cookies, Authentication,and Advanced Requests"</a> talks about advanced
<a name="INDEX-49" class="ipoint"
></a>request
features such as cookies (used to identify a user between web page
accesses) and authentication. <a href="ch01_05.htm#perllwp-CHP-1-EX-6">Example 1-6</a> shows how
easy it is to request a protected page with LWP.
</p>

<a name="perllwp-CHP-1-EX-6"></a><div class="example">
<h4 class="objtitle">Example 1-6. Authenticating </h4>
<pre class="code">#!/usr/bin/perl -w
  
use strict;
use LWP;
  
my $browser = LWP::UserAgent-&gt;new( );
$browser-&gt;credentials("www.example.com:80", "music", "fred" =&gt; "l33t1");
my $response = $browser-&gt;get("http://www.example.com/mp3s");
# ...</pre>
</div>

<p>The <tt class="literal">credentials(&#160;)</tt> method on an LWP::UserAgent
adds the authentication information (the host, realm, and
username/password pair are the parameters). The realm identifies
which username and password are expected if there are multiple
protected areas on a single host. When we request a document using
that LWP::UserAgent object, the authentication information is used if
necessary.
</p>


 
</div>





<div class="sect2">
<h3 class="sect2">1.5.5 Upgrade Now!</h3>

<p>If you're having trouble getting any code from the book to work, the
absolute first thing you should do is make sure you've got a recent version
of LWP installed!  Here's my favorite incantation for seeing what version
you have:</p>

<pre class="code">perl -e "use LWP 1000000000"</pre>

<pre class="code">LWP version 1000000000 required--this is only version 5.68 at -e line 1.
   BEGIN failed--compilation aborted at -e line 1.
</pre>


<p>If the version number you see in "this is only version 5.68" is lower that
5.68, then
<a href=
 "http://search.cpan.org/search?query=LWP&mode=module"
 >upgrade</a>!  This book is not about old versions of LWP, but just about
modern versions -- the more modern the better, since we're constantly
improving its performance and interface.  If you're using an old version,
you're missing out on years of improvements that Gisle, me, and many others
have added for you.</p>

<p>Just to pick two examples: in older LWP versions, you would load the class
HTTP::Cookies::Netscape not with the expected "use HTTP::Cookies::Netscape"
line, but with "use HTTP::Cookies".  Moreover, old versions didn't 
understand cookies files from recent Mozilla versions.  A more compelling
example is that in old LWP versions, LWP::UserAgent had no $browser-&gt;get or
$browser-&gt;post methods -- and this book uses those methods heavily, because
the alternative is a much less friendly syntax: use HTTP::Request::Common;
$browser-&gt;request(GET(...),...); and the like.</p>

<blockquote class='aside'><a name="aside-obsoletes"></a>
This section was added after many complaints from loudly confused users
who were, it turns out, using LWP versions from <em>the late 90's!</em>
</blockquote>

 
</div>






<script type="text/javascript">endpage();</script>
</body></html>
