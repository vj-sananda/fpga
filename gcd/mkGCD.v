//
// Generated by Bluespec Compiler, version 2008.05.beta4 (build 14006, 2008-05-12)
// 
// On Fri Jun 20 11:11:51 CDT 2008
// 
// Method conflict info:
// Method: start
// Sequenced after: result
// Conflicts: start
//  
// Method: result
// Conflict-free: result
// Sequenced before: start
//  
// 
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// result                         O    32
// RDY_result                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_num1                     I    32
// start_num2                     I    32
// EN_start                       I     1
// 
// No combinational paths from inputs to outputs
// 
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGCD(CLK,
	     RST_N,
	     
	     start_num1,
	     start_num2,
	     EN_start,
	     RDY_start,
	     
	     result,
	     RDY_result);
  input  CLK;
  input  RST_N;
  
  // action method start
  input  [31 : 0] start_num1;
  input  [31 : 0] start_num2;
  input  EN_start;
  output RDY_start;
  
  // value method result
  output [31 : 0] result;
  output RDY_result;

  // signals for module outputs
  wire [31 : 0] result;
  wire RDY_result, RDY_start;

  // register x
  reg [31 : 0] x;
  wire [31 : 0] x$D_IN;
  wire x$EN;

  // register y
  reg [31 : 0] y;
  wire [31 : 0] y$D_IN;
  wire y$EN;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_x$write_1__VAL_1, MUX_y$write_1__VAL_1;
  wire MUX_x$write_1__PSEL_1, MUX_x$write_1__SEL_1, MUX_y$write_1__SEL_1;

  // remaining internal signals
  wire x_SLE_y___d8;

  // action method start
  assign RDY_start = y == 32'd0 ;

  // value method result
  assign result = (y == 32'd0) ? x : y ;
  assign RDY_result = y == 32'd0 || x == 32'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_x$write_1__PSEL_1 = y != 32'd0 && x != 32'd0 ;
  assign MUX_x$write_1__SEL_1 = MUX_x$write_1__PSEL_1 && !x_SLE_y___d8 ;
  assign MUX_y$write_1__SEL_1 = MUX_x$write_1__PSEL_1 && x_SLE_y___d8 ;
  assign MUX_x$write_1__VAL_1 = x - y ;
  assign MUX_y$write_1__VAL_1 = y - x ;

  // register x
  assign x$D_IN = MUX_x$write_1__SEL_1 ? MUX_x$write_1__VAL_1 : start_num1 ;
  assign x$EN = MUX_x$write_1__PSEL_1 && !x_SLE_y___d8 || EN_start ;

  // register y
  assign y$D_IN = MUX_y$write_1__SEL_1 ? MUX_y$write_1__VAL_1 : start_num2 ;
  assign y$EN = MUX_x$write_1__PSEL_1 && x_SLE_y___d8 || EN_start ;

  // remaining internal signals
  assign x_SLE_y___d8 = (x ^ 32'h80000000) <= (y ^ 32'h80000000) ;

  // handling of inlined registers
  
  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        y <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (y$EN) y <= `BSV_ASSIGNMENT_DELAY y$D_IN;
      end
    if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
  end
  
  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    x = 32'hAAAAAAAA;
    y = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkGCD


module tb;

   /*AUTOREGINPUT*/
   // Beginning of automatic reg inputs (for undeclared instantiated-module inputs)
   reg			CLK;			// To dut of mkGCD.v
   reg			EN_start;		// To dut of mkGCD.v
   reg			RST_N;			// To dut of mkGCD.v
   reg [31:0]		start_num1;		// To dut of mkGCD.v
   reg [31:0]		start_num2;		// To dut of mkGCD.v
   // End of automatics

   /*AUTOWIRE*/
   // Beginning of automatic wires (for undeclared instantiated-module outputs)
   wire			RDY_result;		// From dut of mkGCD.v
   wire			RDY_start;		// From dut of mkGCD.v
   wire [31:0]		result;			// From dut of mkGCD.v
   // End of automatics

   initial
     begin
	$dumpvars;
	CLK =0;
	RST_N=0;
	start_num1=15;
	start_num2=6;
	EN_start = 0;
	#100;
	RST_N=1;
	#10000;
	$finish;
     end // initial begin

   always #5 CLK = ~CLK;


   always @(posedge CLK)
     if ( RST_N )
       begin
	  start_num1 <= start_num1 + 1;
	  start_num2 <= start_num2 + 2;
	  EN_start <= 1;
	  @(posedge CLK);
	  EN_start <= 0;
	  @(posedge CLK);	  
	  wait( RDY_start );
       end
   
   
   mkGCD dut(/*AUTOINST*/
	     // Outputs
	     .RDY_start			(RDY_start),
	     .result			(result[31:0]),
	     .RDY_result		(RDY_result),
	     // Inputs
	     .CLK			(CLK),
	     .RST_N			(RST_N),
	     .start_num1		(start_num1[31:0]),
	     .start_num2		(start_num2[31:0]),
	     .EN_start			(EN_start));
   
endmodule // tb
